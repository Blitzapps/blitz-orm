//* File auto generated with buildSchema.ts
export const typesSchema = {
  entities: {
    User: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          shared: true,
          path: 'name',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'name',
        },
        {
          path: 'email',
          contentType: 'EMAIL',
          validations: {
            unique: true,
          },
          rights: ['CREATE', 'DELETE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'User·email',
        },
      ],
      linkFields: [
        {
          path: 'accounts',
          relation: 'User-Accounts',
          cardinality: 'MANY',
          plays: 'user',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Accounts',
              plays: 'accounts',
              target: 'role',
              thing: 'Account',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-accounts',
          $things: ['Account'],
        },
        {
          path: 'sessions',
          relation: 'User-Sessions',
          cardinality: 'MANY',
          plays: 'user',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Sessions',
              plays: 'sessions',
              target: 'role',
              thing: 'Session',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-sessions',
          $things: ['Session'],
        },
        {
          path: 'spaces',
          relation: 'Space-User',
          cardinality: 'MANY',
          plays: 'users',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'users',
              cardinality: 'MANY',
              relation: 'Space-User',
              plays: 'spaces',
              target: 'role',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'space-user',
          $things: ['Space'],
        },
        {
          path: 'user-tags',
          relation: 'UserTag',
          cardinality: 'MANY',
          plays: 'users',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['UserTag'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'user-tags',
              thing: 'UserTag',
              thingType: 'relation',
            },
          ],
        },
      ],
      hooks: {
        pre: [
          {
            triggers: {},
            actions: [
              {
                name: 'Validate tf1 test',
                type: 'validate',
                message: 'Failed test tf1',
                severity: 'error',
              },
              {
                name: 'Validate tf2 test',
                type: 'validate',
                message: 'Failed test tf2',
                severity: 'error',
              },
              {
                name: 'Add children',
                type: 'transform',
              },
              {
                name: 'from context',
                description: 'Add space from context',
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                description: 'Use %var to replace name',
                type: 'transform',
              },
            ],
          },
        ],
      },
      subTypes: ['God', 'SuperUser'],
      name: 'User',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    SuperUser: {
      extends: 'User',
      defaultDBConnector: {
        id: 'default',
        as: 'User',
        path: 'SuperUser',
      },
      dataFields: [
        {
          path: 'power',
          validations: {
            required: true,
          },
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'SuperUser·power',
        },
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
        {
          shared: true,
          path: 'name',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'name',
          inherited: true,
        },
        {
          path: 'email',
          contentType: 'EMAIL',
          validations: {
            unique: true,
          },
          rights: ['CREATE', 'DELETE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'User·email',
          inherited: true,
        },
      ],
      allExtends: ['User'],
      idFields: ['id'],
      linkFields: [
        {
          path: 'accounts',
          relation: 'User-Accounts',
          cardinality: 'MANY',
          plays: 'user',
          target: 'role',
          inherited: true,
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Accounts',
              plays: 'accounts',
              target: 'role',
              thing: 'Account',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-accounts',
          $things: ['Account'],
        },
        {
          path: 'sessions',
          relation: 'User-Sessions',
          cardinality: 'MANY',
          plays: 'user',
          target: 'role',
          inherited: true,
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Sessions',
              plays: 'sessions',
              target: 'role',
              thing: 'Session',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-sessions',
          $things: ['Session'],
        },
        {
          path: 'spaces',
          relation: 'Space-User',
          cardinality: 'MANY',
          plays: 'users',
          target: 'role',
          inherited: true,
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'users',
              cardinality: 'MANY',
              relation: 'Space-User',
              plays: 'spaces',
              target: 'role',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'space-user',
          $things: ['Space'],
        },
        {
          path: 'user-tags',
          relation: 'UserTag',
          cardinality: 'MANY',
          plays: 'users',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['UserTag'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'user-tags',
              thing: 'UserTag',
              thingType: 'relation',
            },
          ],
        },
      ],
      hooks: {
        pre: [
          {
            triggers: {},
            actions: [
              {
                name: 'Validate tf1 test',
                type: 'validate',
                message: 'Failed test tf1',
                severity: 'error',
              },
              {
                name: 'Validate tf2 test',
                type: 'validate',
                message: 'Failed test tf2',
                severity: 'error',
              },
              {
                name: 'Add children',
                type: 'transform',
              },
              {
                name: 'from context',
                description: 'Add space from context',
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                description: 'Use %var to replace name',
                type: 'transform',
              },
            ],
          },
        ],
      },
      subTypes: ['God'],
      name: 'SuperUser',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['power', 'id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    God: {
      extends: 'SuperUser',
      defaultDBConnector: {
        id: 'default',
        as: 'SuperUser',
        path: 'God',
      },
      dataFields: [
        {
          path: 'isEvil',
          validations: {
            required: true,
          },
          contentType: 'BOOLEAN',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'God·isEvil',
        },
        {
          path: 'power',
          validations: {
            required: true,
          },
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'SuperUser·power',
          inherited: true,
        },
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
        {
          shared: true,
          path: 'name',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'name',
          inherited: true,
        },
        {
          path: 'email',
          contentType: 'EMAIL',
          validations: {
            unique: true,
          },
          rights: ['CREATE', 'DELETE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'User·email',
          inherited: true,
        },
      ],
      allExtends: ['SuperUser', 'User'],
      idFields: ['id'],
      linkFields: [
        {
          path: 'accounts',
          relation: 'User-Accounts',
          cardinality: 'MANY',
          plays: 'user',
          target: 'role',
          inherited: true,
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Accounts',
              plays: 'accounts',
              target: 'role',
              thing: 'Account',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-accounts',
          $things: ['Account'],
        },
        {
          path: 'sessions',
          relation: 'User-Sessions',
          cardinality: 'MANY',
          plays: 'user',
          target: 'role',
          inherited: true,
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Sessions',
              plays: 'sessions',
              target: 'role',
              thing: 'Session',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-sessions',
          $things: ['Session'],
        },
        {
          path: 'spaces',
          relation: 'Space-User',
          cardinality: 'MANY',
          plays: 'users',
          target: 'role',
          inherited: true,
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'users',
              cardinality: 'MANY',
              relation: 'Space-User',
              plays: 'spaces',
              target: 'role',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'space-user',
          $things: ['Space'],
        },
        {
          path: 'user-tags',
          relation: 'UserTag',
          cardinality: 'MANY',
          plays: 'users',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['UserTag'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'user-tags',
              thing: 'UserTag',
              thingType: 'relation',
            },
          ],
        },
      ],
      hooks: {
        pre: [
          {
            triggers: {},
            actions: [
              {
                name: 'Validate tf1 test',
                type: 'validate',
                message: 'Failed test tf1',
                severity: 'error',
              },
              {
                name: 'Validate tf2 test',
                type: 'validate',
                message: 'Failed test tf2',
                severity: 'error',
              },
              {
                name: 'Add children',
                type: 'transform',
              },
              {
                name: 'from context',
                description: 'Add space from context',
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                description: 'Use %var to replace name',
                type: 'transform',
              },
            ],
          },
        ],
      },
      name: 'God',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['isEvil', 'power', 'id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Space: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
      },
      hooks: {
        pre: [
          {
            actions: [
              {
                name: 'Validate tf2 test in space',
                type: 'validate',
                message: 'Failed test tf2 in space',
                severity: 'error',
              },
            ],
          },
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          shared: true,
          path: 'name',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'name',
        },
      ],
      linkFields: [
        {
          path: 'users',
          cardinality: 'MANY',
          relation: 'Space-User',
          plays: 'spaces',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'spaces',
              relation: 'Space-User',
              cardinality: 'MANY',
              plays: 'users',
              target: 'role',
              thing: 'User',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'space-user',
          $things: ['User', 'God', 'SuperUser'],
        },
        {
          path: 'objects',
          cardinality: 'MANY',
          relation: 'SpaceObj',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['SpaceObj', 'Self', 'DataField', 'Field', 'Kind', 'SpaceDef'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'objects',
              thing: 'SpaceObj',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'definitions',
          cardinality: 'MANY',
          relation: 'SpaceDef',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['SpaceDef', 'DataField', 'Field', 'Kind'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'definitions',
              thing: 'SpaceDef',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'kinds',
          cardinality: 'MANY',
          relation: 'Kind',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Kind'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'kinds',
              thing: 'Kind',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'fields',
          cardinality: 'MANY',
          relation: 'Field',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Field', 'DataField'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'fields',
              thing: 'Field',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'dataFields',
          cardinality: 'MANY',
          relation: 'DataField',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['DataField'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'dataFields',
              thing: 'DataField',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'selfs',
          cardinality: 'MANY',
          relation: 'Self',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Self'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'selfs',
              thing: 'Self',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'userTagGroups',
          cardinality: 'MANY',
          relation: 'UserTagGroup',
          plays: 'space',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['UserTagGroup'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'userTagGroups',
              thing: 'UserTagGroup',
              thingType: 'relation',
            },
          ],
        },
      ],
      name: 'Space',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Account: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'Account',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          path: 'provider',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE', 'DELETE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Account·provider',
        },
        {
          path: 'isSecureProvider',
          contentType: 'BOOLEAN',
          isVirtual: true,
          dbValue: {
            surrealDB: '{$this.provider = "google"} TYPE option<bool>',
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Account·isSecureProvider',
        },
        {
          path: 'profile',
          contentType: 'JSON',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Account·profile',
        },
      ],
      linkFields: [
        {
          path: 'user',
          cardinality: 'ONE',
          relation: 'User-Accounts',
          plays: 'accounts',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'accounts',
              relation: 'User-Accounts',
              cardinality: 'MANY',
              plays: 'user',
              target: 'role',
              thing: 'User',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-accounts',
          $things: ['User', 'God', 'SuperUser'],
        },
      ],
      name: 'Account',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: ['isSecureProvider'],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Session: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          path: 'expires',
          contentType: 'DATE',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Session·expires',
        },
        {
          contentType: 'TEXT',
          path: 'sessionToken',
          validations: {
            unique: true,
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Session·sessionToken',
        },
      ],
      linkFields: [
        {
          path: 'user',
          cardinality: 'ONE',
          relation: 'User-Sessions',
          plays: 'sessions',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'sessions',
              relation: 'User-Sessions',
              cardinality: 'MANY',
              plays: 'user',
              target: 'role',
              thing: 'User',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'user-sessions',
          $things: ['User', 'God', 'SuperUser'],
        },
      ],
      name: 'Session',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    VerificationToken: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          contentType: 'TEXT',
          path: 'identifier',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'VerificationToken·identifier',
        },
        {
          contentType: 'TEXT',
          path: 'token',
          validations: {
            unique: true,
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'VerificationToken·token',
        },
        {
          path: 'expires',
          contentType: 'DATE',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'VerificationToken·expires',
        },
      ],
      name: 'VerificationToken',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Thing: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'Thing',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          path: 'stuff',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE', 'DELETE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Thing·stuff',
        },
      ],
      linkFields: [
        {
          path: 'things',
          cardinality: 'MANY',
          relation: 'ThingRelation',
          plays: 'things',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'things',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'root',
          cardinality: 'ONE',
          relation: 'ThingRelation',
          plays: 'root',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'root',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'extra',
          cardinality: 'ONE',
          relation: 'ThingRelation',
          plays: 'extra',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'extra',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
      ],
      subTypes: ['SubthingTwo', 'SubthingOne'],
      name: 'Thing',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    SubthingOne: {
      extends: 'Thing',
      defaultDBConnector: {
        id: 'default',
        as: 'Thing',
        path: 'SubthingOne',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
        {
          path: 'stuff',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE', 'DELETE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Thing·stuff',
          inherited: true,
        },
      ],
      allExtends: ['Thing'],
      idFields: ['id'],
      linkFields: [
        {
          path: 'things',
          cardinality: 'MANY',
          relation: 'ThingRelation',
          plays: 'things',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'things',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'root',
          cardinality: 'ONE',
          relation: 'ThingRelation',
          plays: 'root',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'root',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'extra',
          cardinality: 'ONE',
          relation: 'ThingRelation',
          plays: 'extra',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'extra',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
      ],
      name: 'SubthingOne',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    SubthingTwo: {
      extends: 'Thing',
      defaultDBConnector: {
        id: 'default',
        as: 'Thing',
        path: 'SubthingTwo',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
        {
          path: 'stuff',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE', 'DELETE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Thing·stuff',
          inherited: true,
        },
      ],
      allExtends: ['Thing'],
      idFields: ['id'],
      linkFields: [
        {
          path: 'things',
          cardinality: 'MANY',
          relation: 'ThingRelation',
          plays: 'things',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'things',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'root',
          cardinality: 'ONE',
          relation: 'ThingRelation',
          plays: 'root',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'root',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'extra',
          cardinality: 'ONE',
          relation: 'ThingRelation',
          plays: 'extra',
          target: 'relation',
          inherited: true,
          fieldType: 'linkField',
          $things: ['ThingRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'extra',
              thing: 'ThingRelation',
              thingType: 'relation',
            },
          ],
        },
      ],
      name: 'SubthingTwo',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    CascadeThing: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'CascadeThing',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      linkFields: [
        {
          path: 'cascadeRelations',
          cardinality: 'MANY',
          relation: 'CascadeRelation',
          plays: 'things',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['CascadeRelation'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'cascadeRelations',
              thing: 'CascadeRelation',
              thingType: 'relation',
            },
          ],
        },
      ],
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      name: 'CascadeThing',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Color: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          path: 'isBlue',
          contentType: 'BOOLEAN',
          isVirtual: true,
          default: {
            type: 'fn',
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Color·isBlue',
        },
        {
          path: 'freeForAll',
          cardinality: 'ONE',
          contentType: 'FLEX',
          isIdField: false,
          dbPath: 'Color·freeForAll',
        },
        {
          path: 'totalUserTags',
          contentType: 'NUMBER',
          isVirtual: true,
          default: {
            type: 'fn',
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Color·totalUserTags',
        },
        {
          path: 'value',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Color·value',
        },
      ],
      linkFields: [
        {
          path: 'user-tags',
          cardinality: 'MANY',
          relation: 'UserTagGroup',
          plays: 'color',
          target: 'role',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'color',
              target: 'role',
              cardinality: 'ONE',
              plays: 'tags',
              relation: 'UserTagGroup',
              thing: 'UserTag',
              thingType: 'relation',
            },
          ],
          pathToRelation: 'group',
          $things: ['UserTag'],
        },
        {
          path: 'group',
          target: 'relation',
          cardinality: 'ONE',
          plays: 'color',
          relation: 'UserTagGroup',
          fieldType: 'linkField',
          $things: ['UserTagGroup'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'group',
              thing: 'UserTagGroup',
              thingType: 'relation',
            },
          ],
        },
      ],
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      name: 'Color',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: ['isBlue', 'totalUserTags'],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Power: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          shared: true,
          path: 'description',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'description',
        },
      ],
      linkFields: [
        {
          path: 'space-user',
          cardinality: 'ONE',
          relation: 'Space-User',
          plays: 'power',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Space-User'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'space-user',
              thing: 'Space-User',
              thingType: 'relation',
            },
          ],
        },
      ],
      name: 'Power',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Hook: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'Hook',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          contentType: 'TEXT',
          path: 'requiredOption',
          validations: {
            required: true,
            enum: ['a', 'b', 'c'],
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Hook·requiredOption',
        },
        {
          path: 'manyOptions',
          cardinality: 'MANY',
          contentType: 'TEXT',
          validations: {
            enum: ['a', 'b', 'c'],
          },
          isIdField: false,
          dbPath: 'Hook·manyOptions',
        },
        {
          path: 'fnValidatedField',
          contentType: 'TEXT',
          validations: {},
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Hook·fnValidatedField',
        },
        {
          contentType: 'DATE',
          path: 'timestamp',
          default: {
            type: 'fn',
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Hook·timestamp',
        },
      ],
      linkFields: [
        {
          path: 'hookParent',
          cardinality: 'ONE',
          relation: 'HookParent',
          plays: 'hooks',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['HookParent'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'hookParent',
              thing: 'HookParent',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'asMainHookOf',
          cardinality: 'ONE',
          relation: 'HookParent',
          plays: 'mainHook',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['HookParent'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'asMainHookOf',
              thing: 'HookParent',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'otherTags',
          cardinality: 'MANY',
          relation: 'HookATag',
          plays: 'hookTypeA',
          target: 'role',
          isVirtual: true,
          dbValue: {
            surrealDB:
              '<future> {RETURN IF (requiredOption = "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption != "a")) ELSE RETURN [] END;}',
          },
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'tagA',
              cardinality: 'MANY',
              relation: 'HookATag',
              plays: 'otherHooks',
              target: 'role',
              isVirtual: true,
              dbValue: {
                surrealDB:
                  '<future> {RETURN IF (requiredOption != "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption = "a")) ELSE RETURN [] END;}',
              },
              thing: 'Hook',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'hookatag',
          $things: ['Hook'],
        },
        {
          path: 'tagA',
          cardinality: 'MANY',
          relation: 'HookATag',
          plays: 'otherHooks',
          target: 'role',
          isVirtual: true,
          dbValue: {
            surrealDB:
              '<future> {RETURN IF (requiredOption != "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption = "a")) ELSE RETURN [] END;}',
          },
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'otherTags',
              cardinality: 'MANY',
              relation: 'HookATag',
              plays: 'hookTypeA',
              target: 'role',
              isVirtual: true,
              dbValue: {
                surrealDB:
                  '<future> {RETURN IF (requiredOption = "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption != "a")) ELSE RETURN [] END;}',
              },
              thing: 'Hook',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'hookatag',
          $things: ['Hook'],
        },
      ],
      hooks: {
        pre: [
          {
            triggers: {},
            actions: [
              {
                type: 'validate',
                severity: 'error',
                message: 'Default message',
              },
            ],
          },
        ],
      },
      name: 'Hook',
      thingType: 'entity',
      computedFields: ['id', 'timestamp'],
      virtualFields: ['otherTags', 'tagA'],
      requiredFields: ['id', 'requiredOption'],
      enumFields: ['requiredOption', 'manyOptions'],
      fnValidatedFields: ['fnValidatedField'],
    },
    Company: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'Company',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          path: 'name',
          contentType: 'TEXT',
          validations: {
            required: true,
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Company·name',
        },
        {
          path: 'industry',
          contentType: 'TEXT',
          validations: {
            enum: ['Tech', 'Finance', 'Healthcare', 'Retail', 'Manufacturing'],
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Company·industry',
        },
      ],
      linkFields: [
        {
          path: 'employees',
          plays: 'company',
          cardinality: 'MANY',
          relation: 'Employee',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Employee'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'employees',
              thing: 'Employee',
              thingType: 'relation',
            },
          ],
        },
      ],
      name: 'Company',
      thingType: 'entity',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id', 'name'],
      enumFields: ['industry'],
      fnValidatedFields: [],
    },
  },
  relations: {
    'User-Accounts': {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'User-Accounts',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        accounts: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Accounts',
              plays: 'accounts',
              target: 'role',
              thing: 'Account',
              thingType: 'entity',
              pathToRelation: 'user-accounts',
            },
          ],
          impactedLinkFields: [],
          path: 'accounts',
          $things: ['Account'],
        },
        user: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'accounts',
              relation: 'User-Accounts',
              cardinality: 'MANY',
              plays: 'user',
              target: 'role',
              thing: 'User',
              thingType: 'entity',
              pathToRelation: 'user-accounts',
            },
          ],
          impactedLinkFields: [],
          path: 'user',
          $things: ['God', 'SuperUser', 'User'],
        },
      },
      name: 'User-Accounts',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    'User-Sessions': {
      defaultDBConnector: {
        id: 'default',
        path: 'User-Sessions',
      },
      idFields: ['id'],
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        sessions: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'user',
              cardinality: 'ONE',
              relation: 'User-Sessions',
              plays: 'sessions',
              target: 'role',
              thing: 'Session',
              thingType: 'entity',
              pathToRelation: 'user-sessions',
            },
          ],
          impactedLinkFields: [],
          path: 'sessions',
          $things: ['Session'],
        },
        user: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'sessions',
              relation: 'User-Sessions',
              cardinality: 'MANY',
              plays: 'user',
              target: 'role',
              thing: 'User',
              thingType: 'entity',
              pathToRelation: 'user-sessions',
            },
          ],
          impactedLinkFields: [],
          path: 'user',
          $things: ['God', 'SuperUser', 'User'],
        },
      },
      name: 'User-Sessions',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    'Space-User': {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'Space-User',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        spaces: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'users',
              cardinality: 'MANY',
              relation: 'Space-User',
              plays: 'spaces',
              target: 'role',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'space-user',
            },
          ],
          impactedLinkFields: [],
          path: 'spaces',
          $things: ['Space'],
        },
        users: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'spaces',
              relation: 'Space-User',
              cardinality: 'MANY',
              plays: 'users',
              target: 'role',
              thing: 'User',
              thingType: 'entity',
              pathToRelation: 'space-user',
            },
          ],
          impactedLinkFields: [],
          path: 'users',
          $things: ['God', 'SuperUser', 'User'],
        },
        power: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'space-user',
              cardinality: 'ONE',
              relation: 'Space-User',
              plays: 'power',
              target: 'relation',
              thing: 'Power',
              thingType: 'entity',
              pathToRelation: 'space-user',
            },
          ],
          impactedLinkFields: [],
          path: 'power',
          $things: ['Power'],
        },
      },
      name: 'Space-User',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    UserTag: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'UserTag',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          shared: true,
          path: 'name',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'name',
        },
      ],
      roles: {
        users: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'user-tags',
              relation: 'UserTag',
              cardinality: 'MANY',
              plays: 'users',
              target: 'relation',
              thing: 'User',
              thingType: 'entity',
              pathToRelation: 'user-tags',
            },
          ],
          impactedLinkFields: [],
          path: 'users',
          $things: ['God', 'SuperUser', 'User'],
        },
      },
      linkFields: [
        {
          path: 'color',
          target: 'role',
          cardinality: 'ONE',
          plays: 'tags',
          relation: 'UserTagGroup',
          fieldType: 'linkField',
          oppositeLinkFieldsPlayedBy: [
            {
              path: 'user-tags',
              cardinality: 'MANY',
              relation: 'UserTagGroup',
              plays: 'color',
              target: 'role',
              thing: 'Color',
              thingType: 'entity',
            },
          ],
          pathToRelation: 'group',
          $things: ['Color'],
        },
        {
          path: 'group',
          target: 'relation',
          cardinality: 'ONE',
          plays: 'tags',
          relation: 'UserTagGroup',
          fieldType: 'linkField',
          $things: ['UserTagGroup'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'group',
              thing: 'UserTagGroup',
              thingType: 'relation',
            },
          ],
        },
      ],
      name: 'UserTag',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    UserTagGroup: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'UserTagGroup',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        tags: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'color',
              target: 'role',
              cardinality: 'ONE',
              plays: 'tags',
              relation: 'UserTagGroup',
              thing: 'UserTag',
              thingType: 'relation',
              pathToRelation: 'usertaggroup',
            },
            {
              path: 'group',
              target: 'relation',
              cardinality: 'ONE',
              plays: 'tags',
              relation: 'UserTagGroup',
              thing: 'UserTag',
              thingType: 'relation',
              pathToRelation: 'group',
            },
          ],
          impactedLinkFields: [],
          path: 'tags',
          $things: ['UserTag'],
        },
        color: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'user-tags',
              cardinality: 'MANY',
              relation: 'UserTagGroup',
              plays: 'color',
              target: 'role',
              thing: 'Color',
              thingType: 'entity',
              pathToRelation: 'usertaggroup',
            },
            {
              path: 'group',
              target: 'relation',
              cardinality: 'ONE',
              plays: 'color',
              relation: 'UserTagGroup',
              thing: 'Color',
              thingType: 'entity',
              pathToRelation: 'group',
            },
          ],
          impactedLinkFields: [],
          path: 'color',
          $things: ['Color'],
        },
        space: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'userTagGroups',
              cardinality: 'MANY',
              relation: 'UserTagGroup',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'userTagGroups',
            },
          ],
          impactedLinkFields: [],
          path: 'space',
          $things: ['Space'],
        },
      },
      name: 'UserTagGroup',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    SpaceObj: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'SpaceObj',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        space: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'objects',
              cardinality: 'MANY',
              relation: 'SpaceObj',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'objects',
            },
          ],
          impactedLinkFields: [],
          path: 'space',
          $things: ['Space'],
        },
      },
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      subTypes: ['Self', 'DataField', 'Field', 'Kind', 'SpaceDef'],
      name: 'SpaceObj',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    SpaceDef: {
      extends: 'SpaceObj',
      defaultDBConnector: {
        id: 'default',
        as: 'SpaceObj',
        path: 'SpaceDef',
      },
      dataFields: [
        {
          shared: true,
          path: 'description',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'description',
        },
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
      ],
      allExtends: ['SpaceObj'],
      idFields: ['id'],
      roles: {
        space: {
          cardinality: 'ONE',
          inherited: true,
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'definitions',
              cardinality: 'MANY',
              relation: 'SpaceDef',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'definitions',
            },
          ],
          impactedLinkFields: [
            {
              path: 'objects',
              cardinality: 'MANY',
              relation: 'SpaceObj',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          path: 'space',
          $things: ['Space'],
        },
      },
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      subTypes: ['DataField', 'Field', 'Kind'],
      name: 'SpaceDef',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Kind: {
      extends: 'SpaceDef',
      dataFields: [
        {
          contentType: 'TEXT',
          path: 'name',
          rights: ['CREATE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Kind·name',
        },
        {
          shared: true,
          path: 'description',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'description',
          inherited: true,
        },
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
      ],
      linkFields: [
        {
          path: 'fields',
          relation: 'Field',
          cardinality: 'MANY',
          plays: 'kinds',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Field', 'DataField'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'fields',
              thing: 'Field',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'dataFields',
          relation: 'DataField',
          cardinality: 'MANY',
          plays: 'kinds',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['DataField'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'dataFields',
              thing: 'DataField',
              thingType: 'relation',
            },
          ],
        },
      ],
      defaultDBConnector: {
        id: 'default',
        as: 'SpaceDef',
        path: 'Kind',
      },
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
          {
            triggers: {},
            actions: [
              {
                type: 'validate',
                severity: 'error',
                message: 'Name must not exist, or be less than 15 characters',
              },
              {
                type: 'validate',
                severity: 'error',
                message: 'Name must not exist, or be less than 15 characters',
              },
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      allExtends: ['SpaceDef', 'SpaceObj'],
      idFields: ['id'],
      roles: {
        space: {
          cardinality: 'ONE',
          inherited: true,
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'kinds',
              cardinality: 'MANY',
              relation: 'Kind',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'kinds',
            },
          ],
          impactedLinkFields: [
            {
              path: 'objects',
              cardinality: 'MANY',
              relation: 'SpaceObj',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
            {
              path: 'definitions',
              cardinality: 'MANY',
              relation: 'SpaceDef',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          path: 'space',
          $things: ['Space'],
        },
      },
      name: 'Kind',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Field: {
      extends: 'SpaceDef',
      dataFields: [
        {
          contentType: 'TEXT',
          path: 'name',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Field·name',
        },
        {
          contentType: 'TEXT',
          path: 'cardinality',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Field·cardinality',
        },
        {
          shared: true,
          path: 'description',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'description',
          inherited: true,
        },
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
      ],
      roles: {
        kinds: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'fields',
              relation: 'Field',
              cardinality: 'MANY',
              plays: 'kinds',
              target: 'relation',
              thing: 'Kind',
              thingType: 'relation',
              pathToRelation: 'fields',
            },
          ],
          impactedLinkFields: [],
          path: 'kinds',
          $things: ['Kind'],
        },
        space: {
          cardinality: 'ONE',
          inherited: true,
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'fields',
              cardinality: 'MANY',
              relation: 'Field',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'fields',
            },
          ],
          impactedLinkFields: [
            {
              path: 'objects',
              cardinality: 'MANY',
              relation: 'SpaceObj',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
            {
              path: 'definitions',
              cardinality: 'MANY',
              relation: 'SpaceDef',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          path: 'space',
          $things: ['Space'],
        },
      },
      defaultDBConnector: {
        id: 'default',
        as: 'SpaceDef',
        path: 'Field',
      },
      allExtends: ['SpaceDef', 'SpaceObj'],
      idFields: ['id'],
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      subTypes: ['DataField'],
      name: 'Field',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    DataField: {
      extends: 'Field',
      dataFields: [
        {
          contentType: 'TEXT',
          path: 'type',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'DataField·type',
        },
        {
          contentType: 'TEXT',
          path: 'computeType',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'DataField·computeType',
        },
        {
          contentType: 'TEXT',
          path: 'name',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Field·name',
          inherited: true,
        },
        {
          contentType: 'TEXT',
          path: 'cardinality',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Field·cardinality',
          inherited: true,
        },
        {
          shared: true,
          path: 'description',
          contentType: 'TEXT',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'description',
          inherited: true,
        },
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
      ],
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
          {
            actions: [
              {
                name: 'Validate tf2 test in datafield',
                type: 'validate',
                message: 'Failed test tf2 in datafield',
                severity: 'error',
              },
            ],
          },
        ],
      },
      linkFields: [
        {
          path: 'values',
          relation: 'DataValue',
          cardinality: 'MANY',
          plays: 'dataField',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['DataValue'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'values',
              thing: 'DataValue',
              thingType: 'relation',
            },
          ],
        },
        {
          path: 'expression',
          relation: 'Expression',
          cardinality: 'ONE',
          plays: 'dataField',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Expression'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'expression',
              thing: 'Expression',
              thingType: 'relation',
            },
          ],
        },
      ],
      defaultDBConnector: {
        id: 'default',
        as: 'Field',
        path: 'DataField',
      },
      allExtends: ['Field', 'SpaceDef', 'SpaceObj'],
      idFields: ['id'],
      roles: {
        kinds: {
          cardinality: 'MANY',
          inherited: true,
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'dataFields',
              relation: 'DataField',
              cardinality: 'MANY',
              plays: 'kinds',
              target: 'relation',
              thing: 'Kind',
              thingType: 'relation',
              pathToRelation: 'dataFields',
            },
          ],
          impactedLinkFields: [
            {
              path: 'fields',
              relation: 'Field',
              cardinality: 'MANY',
              plays: 'kinds',
              target: 'relation',
              thing: 'Kind',
              thingType: 'relation',
            },
          ],
          path: 'kinds',
          $things: ['Kind'],
        },
        space: {
          cardinality: 'ONE',
          inherited: true,
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'dataFields',
              cardinality: 'MANY',
              relation: 'DataField',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'dataFields',
            },
          ],
          impactedLinkFields: [
            {
              path: 'objects',
              cardinality: 'MANY',
              relation: 'SpaceObj',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
            {
              path: 'definitions',
              cardinality: 'MANY',
              relation: 'SpaceDef',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
            {
              path: 'fields',
              cardinality: 'MANY',
              relation: 'Field',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          path: 'space',
          $things: ['Space'],
        },
      },
      name: 'DataField',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    DataValue: {
      idFields: ['id'],
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          contentType: 'TEXT',
          path: 'type',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'DataValue·type',
        },
      ],
      hooks: {
        pre: [
          {
            actions: [
              {
                name: 'Validate tf2 test in expression',
                type: 'validate',
                message: 'Failed test tf2 in expression',
                severity: 'error',
              },
            ],
          },
        ],
      },
      roles: {
        dataField: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'values',
              relation: 'DataValue',
              cardinality: 'MANY',
              plays: 'dataField',
              target: 'relation',
              thing: 'DataField',
              thingType: 'relation',
              pathToRelation: 'values',
            },
          ],
          impactedLinkFields: [],
          path: 'dataField',
          $things: ['DataField'],
        },
      },
      defaultDBConnector: {
        id: 'default',
        path: 'DataValue',
      },
      name: 'DataValue',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Expression: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        as: 'Expression',
        path: 'Expression',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          contentType: 'TEXT',
          path: 'value',
          rights: ['CREATE', 'UPDATE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Expression·value',
        },
        {
          contentType: 'TEXT',
          path: 'type',
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'Expression·type',
        },
      ],
      hooks: {
        pre: [
          {
            actions: [
              {
                name: 'Validate tf2 test in expression',
                type: 'validate',
                message: 'Failed test tf2 in expression',
                severity: 'error',
              },
            ],
          },
        ],
      },
      roles: {
        dataField: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'expression',
              relation: 'Expression',
              cardinality: 'ONE',
              plays: 'dataField',
              target: 'relation',
              thing: 'DataField',
              thingType: 'relation',
              pathToRelation: 'expression',
            },
          ],
          impactedLinkFields: [],
          path: 'dataField',
          $things: ['DataField'],
        },
      },
      name: 'Expression',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Self: {
      idFields: ['id'],
      extends: 'SpaceObj',
      defaultDBConnector: {
        id: 'default',
        as: 'SpaceObj',
        path: 'Self',
      },
      roles: {
        owner: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'owned',
              cardinality: 'MANY',
              relation: 'Self',
              plays: 'owner',
              target: 'relation',
              thing: 'Self',
              thingType: 'relation',
              pathToRelation: 'owned',
            },
          ],
          impactedLinkFields: [],
          path: 'owner',
          $things: ['Self'],
        },
        space: {
          cardinality: 'ONE',
          inherited: true,
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'selfs',
              cardinality: 'MANY',
              relation: 'Self',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
              pathToRelation: 'selfs',
            },
          ],
          impactedLinkFields: [
            {
              path: 'objects',
              cardinality: 'MANY',
              relation: 'SpaceObj',
              plays: 'space',
              target: 'relation',
              thing: 'Space',
              thingType: 'entity',
            },
          ],
          path: 'space',
          $things: ['Space'],
        },
      },
      linkFields: [
        {
          path: 'owned',
          cardinality: 'MANY',
          relation: 'Self',
          plays: 'owner',
          target: 'relation',
          fieldType: 'linkField',
          $things: ['Self'],
          oppositeLinkFieldsPlayedBy: [
            {
              plays: 'owned',
              thing: 'Self',
              thingType: 'relation',
            },
          ],
        },
      ],
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
          inherited: true,
        },
      ],
      allExtends: ['SpaceObj'],
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      name: 'Self',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    ThingRelation: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'ThingRelation',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          path: 'moreStuff',
          contentType: 'TEXT',
          rights: ['CREATE', 'UPDATE', 'DELETE'],
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'ThingRelation·moreStuff',
        },
      ],
      roles: {
        things: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'things',
              cardinality: 'MANY',
              relation: 'ThingRelation',
              plays: 'things',
              target: 'relation',
              thing: 'Thing',
              thingType: 'entity',
              pathToRelation: 'things',
            },
          ],
          impactedLinkFields: [],
          path: 'things',
          $things: ['SubthingTwo', 'SubthingOne', 'Thing'],
        },
        root: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'root',
              cardinality: 'ONE',
              relation: 'ThingRelation',
              plays: 'root',
              target: 'relation',
              thing: 'Thing',
              thingType: 'entity',
              pathToRelation: 'root',
            },
          ],
          impactedLinkFields: [],
          path: 'root',
          $things: ['SubthingTwo', 'SubthingOne', 'Thing'],
        },
        extra: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'extra',
              cardinality: 'ONE',
              relation: 'ThingRelation',
              plays: 'extra',
              target: 'relation',
              thing: 'Thing',
              thingType: 'entity',
              pathToRelation: 'extra',
            },
          ],
          impactedLinkFields: [],
          path: 'extra',
          $things: ['SubthingTwo', 'SubthingOne', 'Thing'],
        },
      },
      name: 'ThingRelation',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    CascadeRelation: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'CascadeRelation',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        things: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'cascadeRelations',
              cardinality: 'MANY',
              relation: 'CascadeRelation',
              plays: 'things',
              target: 'relation',
              thing: 'CascadeThing',
              thingType: 'entity',
              pathToRelation: 'cascadeRelations',
            },
          ],
          impactedLinkFields: [],
          path: 'things',
          $things: ['CascadeThing'],
        },
      },
      hooks: {
        pre: [
          {
            actions: [
              {
                type: 'transform',
              },
            ],
          },
        ],
      },
      name: 'CascadeRelation',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    HookParent: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'HookParent',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        hooks: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'hookParent',
              cardinality: 'ONE',
              relation: 'HookParent',
              plays: 'hooks',
              target: 'relation',
              thing: 'Hook',
              thingType: 'entity',
              pathToRelation: 'hookParent',
            },
          ],
          impactedLinkFields: [],
          path: 'hooks',
          $things: ['Hook'],
        },
        mainHook: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'asMainHookOf',
              cardinality: 'ONE',
              relation: 'HookParent',
              plays: 'mainHook',
              target: 'relation',
              thing: 'Hook',
              thingType: 'entity',
              pathToRelation: 'asMainHookOf',
            },
          ],
          impactedLinkFields: [],
          path: 'mainHook',
          $things: ['Hook'],
        },
      },
      name: 'HookParent',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    HookATag: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'HookATag',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
      ],
      roles: {
        hookTypeA: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'otherTags',
              cardinality: 'MANY',
              relation: 'HookATag',
              plays: 'hookTypeA',
              target: 'role',
              isVirtual: true,
              dbValue: {
                surrealDB:
                  '<future> {RETURN IF (requiredOption = "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption != "a")) ELSE RETURN [] END;}',
              },
              thing: 'Hook',
              thingType: 'entity',
              pathToRelation: 'hookatag',
            },
          ],
          impactedLinkFields: [],
          path: 'hookTypeA',
          $things: ['Hook'],
        },
        otherHooks: {
          cardinality: 'MANY',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'tagA',
              cardinality: 'MANY',
              relation: 'HookATag',
              plays: 'otherHooks',
              target: 'role',
              isVirtual: true,
              dbValue: {
                surrealDB:
                  '<future> {RETURN IF (requiredOption != "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption = "a")) ELSE RETURN [] END;}',
              },
              thing: 'Hook',
              thingType: 'entity',
              pathToRelation: 'hookatag',
            },
          ],
          impactedLinkFields: [],
          path: 'otherHooks',
          $things: ['Hook'],
        },
      },
      hooks: {
        pre: [
          {
            triggers: {},
            actions: [
              {
                type: 'validate',
                severity: 'error',
                message: "Can't be an array",
              },
            ],
          },
        ],
      },
      name: 'HookATag',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id'],
      enumFields: [],
      fnValidatedFields: [],
    },
    Employee: {
      idFields: ['id'],
      defaultDBConnector: {
        id: 'default',
        path: 'Employee',
      },
      dataFields: [
        {
          shared: true,
          path: 'id',
          default: {
            type: 'fn',
          },
          validations: {
            required: true,
            unique: true,
          },
          contentType: 'ID',
          rights: ['CREATE'],
          isIdField: true,
          cardinality: 'ONE',
          dbPath: 'id',
        },
        {
          shared: true,
          path: 'name',
          contentType: 'TEXT',
          validations: {
            required: true,
          },
          isIdField: false,
          cardinality: 'ONE',
          dbPath: 'name',
        },
      ],
      roles: {
        company: {
          cardinality: 'ONE',
          fieldType: 'roleField',
          playedBy: [
            {
              path: 'employees',
              plays: 'company',
              cardinality: 'MANY',
              relation: 'Employee',
              target: 'relation',
              thing: 'Company',
              thingType: 'entity',
              pathToRelation: 'employees',
            },
          ],
          impactedLinkFields: [],
          path: 'company',
          $things: ['Company'],
        },
      },
      name: 'Employee',
      thingType: 'relation',
      computedFields: ['id'],
      virtualFields: [],
      requiredFields: ['id', 'name'],
      enumFields: [],
      fnValidatedFields: [],
    },
  },
} as const;
