import { describe, expect, it } from 'vitest';
import { enrichSchema } from '../../src/enrichSchema';
import { schema } from '../mocks/schema';
import type { DBHandles } from '../../src';
import { SimpleSurrealClient } from '../../src/adapters/surrealDB/client';

describe('enrichSchema', () => {
	const dbHandles: DBHandles = {
		surrealDB: new Map([
			[
				'default',
				{
					client: new SimpleSurrealClient({ url: '', username: '', password: '', namespace: '', database: '' }),
					providerConfig: { linkMode: 'refs' as const },
				},
			],
		]),
	};

	it('should match the original implementation', () => {
		const input = deepClone(schema);
		const enrichedSchema = enrichSchema(input, dbHandles);
		const expected = {
			entities: {
				User: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							shared: true,
							path: 'name',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'name',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'email',
							contentType: 'EMAIL',
							validations: { unique: true },
							rights: ['CREATE', 'DELETE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'User·email',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'accounts',
							relation: 'User-Accounts',
							cardinality: 'MANY',
							plays: 'user',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-accounts',
							inherited: false,
							$things: ['Account'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Accounts',
									plays: 'accounts',
									target: 'role',
									thing: 'Account',
									thingType: 'entity',
									pathToRelation: 'user-accounts',
								},
							],
						},
						{
							path: 'sessions',
							relation: 'User-Sessions',
							cardinality: 'MANY',
							plays: 'user',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-sessions',
							inherited: false,
							$things: ['Session'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Sessions',
									plays: 'sessions',
									target: 'role',
									thing: 'Session',
									thingType: 'entity',
									pathToRelation: 'user-sessions',
								},
							],
						},
						{
							path: 'spaces',
							relation: 'Space-User',
							cardinality: 'MANY',
							plays: 'users',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'space-user',
							inherited: false,
							$things: ['Space'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'users',
									cardinality: 'MANY',
									relation: 'Space-User',
									plays: 'spaces',
									target: 'role',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
						},
						{
							path: 'user-tags',
							relation: 'UserTag',
							cardinality: 'MANY',
							plays: 'users',
							target: 'relation',
							$things: ['UserTag'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'user-tags', thing: 'UserTag', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					hooks: {
						pre: [
							{
								triggers: {},
								actions: [
									{ name: 'Validate tf1 test', type: 'validate', message: 'Failed test tf1', severity: 'error' },
									{ name: 'Validate tf2 test', type: 'validate', message: 'Failed test tf2', severity: 'error' },
									{ name: 'Add children', type: 'transform' },
									{ name: 'from context', description: 'Add space from context', type: 'transform' },
								],
							},
							{ actions: [{ type: 'transform' }] },
							{ actions: [{ description: 'Use %var to replace name', type: 'transform' }, { type: 'transform' }] },
						],
					},
					name: 'User',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
					subTypes: ['SuperUser', 'God'],
				},
				SuperUser: {
					extends: 'User',
					defaultDBConnector: { id: 'default', as: 'User', path: 'SuperUser' },
					dataFields: [
						{
							path: 'power',
							validations: { required: true },
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'SuperUser·power',
							isIdField: false,
							inherited: false,
						},
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
						{
							shared: true,
							path: 'name',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'name',
							isIdField: false,
							inherited: true,
						},
						{
							path: 'email',
							contentType: 'EMAIL',
							validations: { unique: true },
							rights: ['CREATE', 'DELETE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'User·email',
							isIdField: false,
							inherited: true,
						},
					],
					name: 'SuperUser',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					hooks: {
						pre: [
							{
								triggers: {},
								actions: [
									{ name: 'Validate tf1 test', type: 'validate', message: 'Failed test tf1', severity: 'error' },
									{ name: 'Validate tf2 test', type: 'validate', message: 'Failed test tf2', severity: 'error' },
									{ name: 'Add children', type: 'transform' },
									{ name: 'from context', description: 'Add space from context', type: 'transform' },
								],
							},
							{ actions: [{ type: 'transform' }] },
							{ actions: [{ description: 'Use %var to replace name', type: 'transform' }, { type: 'transform' }] },
						],
					},
					linkFields: [
						{
							path: 'accounts',
							relation: 'User-Accounts',
							cardinality: 'MANY',
							plays: 'user',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-accounts',
							inherited: true,
							$things: ['Account'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Accounts',
									plays: 'accounts',
									target: 'role',
									thing: 'Account',
									thingType: 'entity',
									pathToRelation: 'user-accounts',
								},
							],
						},
						{
							path: 'sessions',
							relation: 'User-Sessions',
							cardinality: 'MANY',
							plays: 'user',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-sessions',
							inherited: true,
							$things: ['Session'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Sessions',
									plays: 'sessions',
									target: 'role',
									thing: 'Session',
									thingType: 'entity',
									pathToRelation: 'user-sessions',
								},
							],
						},
						{
							path: 'spaces',
							relation: 'Space-User',
							cardinality: 'MANY',
							plays: 'users',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'space-user',
							inherited: true,
							$things: ['Space'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'users',
									cardinality: 'MANY',
									relation: 'Space-User',
									plays: 'spaces',
									target: 'role',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
						},
						{
							path: 'user-tags',
							relation: 'UserTag',
							cardinality: 'MANY',
							plays: 'users',
							target: 'relation',
							$things: ['UserTag'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'user-tags', thing: 'UserTag', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
					],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['power', 'id'],
					allExtends: ['User'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
					subTypes: ['God'],
				},
				God: {
					extends: 'SuperUser',
					defaultDBConnector: { id: 'default', as: 'SuperUser', path: 'God' },
					dataFields: [
						{
							path: 'isEvil',
							validations: { required: true },
							contentType: 'BOOLEAN',
							cardinality: 'ONE',
							dbPath: 'God·isEvil',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'power',
							validations: { required: true },
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'SuperUser·power',
							isIdField: false,
							inherited: true,
						},
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
						{
							shared: true,
							path: 'name',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'name',
							isIdField: false,
							inherited: true,
						},
						{
							path: 'email',
							contentType: 'EMAIL',
							validations: { unique: true },
							rights: ['CREATE', 'DELETE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'User·email',
							isIdField: false,
							inherited: true,
						},
					],
					name: 'God',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					hooks: {
						pre: [
							{
								triggers: {},
								actions: [
									{ name: 'Validate tf1 test', type: 'validate', message: 'Failed test tf1', severity: 'error' },
									{ name: 'Validate tf2 test', type: 'validate', message: 'Failed test tf2', severity: 'error' },
									{ name: 'Add children', type: 'transform' },
									{ name: 'from context', description: 'Add space from context', type: 'transform' },
								],
							},
							{ actions: [{ type: 'transform' }] },
							{ actions: [{ description: 'Use %var to replace name', type: 'transform' }, { type: 'transform' }] },
						],
					},
					linkFields: [
						{
							path: 'accounts',
							relation: 'User-Accounts',
							cardinality: 'MANY',
							plays: 'user',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-accounts',
							inherited: true,
							$things: ['Account'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Accounts',
									plays: 'accounts',
									target: 'role',
									thing: 'Account',
									thingType: 'entity',
									pathToRelation: 'user-accounts',
								},
							],
						},
						{
							path: 'sessions',
							relation: 'User-Sessions',
							cardinality: 'MANY',
							plays: 'user',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-sessions',
							inherited: true,
							$things: ['Session'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Sessions',
									plays: 'sessions',
									target: 'role',
									thing: 'Session',
									thingType: 'entity',
									pathToRelation: 'user-sessions',
								},
							],
						},
						{
							path: 'spaces',
							relation: 'Space-User',
							cardinality: 'MANY',
							plays: 'users',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'space-user',
							inherited: true,
							$things: ['Space'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'users',
									cardinality: 'MANY',
									relation: 'Space-User',
									plays: 'spaces',
									target: 'role',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
						},
						{
							path: 'user-tags',
							relation: 'UserTag',
							cardinality: 'MANY',
							plays: 'users',
							target: 'relation',
							$things: ['UserTag'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'user-tags', thing: 'UserTag', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
					],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['isEvil', 'power', 'id'],
					allExtends: ['SuperUser', 'User'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Space: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					hooks: {
						pre: [
							{
								actions: [
									{
										name: 'Validate tf2 test in space',
										type: 'validate',
										message: 'Failed test tf2 in space',
										severity: 'error',
									},
								],
							},
							{ actions: [{ type: 'transform' }] },
						],
					},
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							shared: true,
							path: 'name',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'name',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'users',
							cardinality: 'MANY',
							relation: 'Space-User',
							plays: 'spaces',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'space-user',
							inherited: false,
							$things: ['User', 'SuperUser', 'God'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'spaces',
									relation: 'Space-User',
									cardinality: 'MANY',
									plays: 'users',
									target: 'role',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
						},
						{
							path: 'objects',
							cardinality: 'MANY',
							relation: 'SpaceObj',
							plays: 'space',
							target: 'relation',
							$things: ['SpaceObj', 'SpaceDef', 'Kind', 'Field', 'DataField', 'Self'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'objects', thing: 'SpaceObj', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'definitions',
							cardinality: 'MANY',
							relation: 'SpaceDef',
							plays: 'space',
							target: 'relation',
							$things: ['SpaceDef', 'Kind', 'Field', 'DataField'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'definitions', thing: 'SpaceDef', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'kinds',
							cardinality: 'MANY',
							relation: 'Kind',
							plays: 'space',
							target: 'relation',
							$things: ['Kind'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'kinds', thing: 'Kind', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'fields',
							cardinality: 'MANY',
							relation: 'Field',
							plays: 'space',
							target: 'relation',
							$things: ['Field', 'DataField'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'fields', thing: 'Field', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'dataFields',
							cardinality: 'MANY',
							relation: 'DataField',
							plays: 'space',
							target: 'relation',
							$things: ['DataField'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'dataFields', thing: 'DataField', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'selfs',
							cardinality: 'MANY',
							relation: 'Self',
							plays: 'space',
							target: 'relation',
							$things: ['Self'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'selfs', thing: 'Self', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'userTagGroups',
							cardinality: 'MANY',
							relation: 'UserTagGroup',
							plays: 'space',
							target: 'relation',
							$things: ['UserTagGroup'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'userTagGroups', thing: 'UserTagGroup', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'flexRefRels',
							cardinality: 'MANY',
							relation: 'FlexRefRel',
							plays: 'space',
							target: 'relation',
							$things: ['FlexRefRel'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'flexRefRels', thing: 'FlexRefRel', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					name: 'Space',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Account: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'Account' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							path: 'provider',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE', 'DELETE'],
							cardinality: 'ONE',
							dbPath: 'Account·provider',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'isSecureProvider',
							contentType: 'BOOLEAN',
							isVirtual: true,
							dbValue: { surrealDB: '{$this.provider = "google"} TYPE option<bool>' },
							cardinality: 'ONE',
							dbPath: 'Account·isSecureProvider',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'profile',
							contentType: 'JSON',
							cardinality: 'ONE',
							dbPath: 'Account·profile',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'user',
							cardinality: 'ONE',
							relation: 'User-Accounts',
							plays: 'accounts',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-accounts',
							inherited: false,
							$things: ['User', 'SuperUser', 'God'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'accounts',
									relation: 'User-Accounts',
									cardinality: 'MANY',
									plays: 'user',
									target: 'role',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'user-accounts',
								},
							],
						},
					],
					name: 'Account',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: ['isSecureProvider'],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Session: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							path: 'expires',
							contentType: 'DATE',
							cardinality: 'ONE',
							dbPath: 'Session·expires',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'sessionToken',
							validations: { unique: true },
							cardinality: 'ONE',
							dbPath: 'Session·sessionToken',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'user',
							cardinality: 'ONE',
							relation: 'User-Sessions',
							plays: 'sessions',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'user-sessions',
							inherited: false,
							$things: ['User', 'SuperUser', 'God'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'sessions',
									relation: 'User-Sessions',
									cardinality: 'MANY',
									plays: 'user',
									target: 'role',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'user-sessions',
								},
							],
						},
					],
					name: 'Session',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				VerificationToken: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'identifier',
							cardinality: 'ONE',
							dbPath: 'VerificationToken·identifier',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'token',
							validations: { unique: true },
							cardinality: 'ONE',
							dbPath: 'VerificationToken·token',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'expires',
							contentType: 'DATE',
							cardinality: 'ONE',
							dbPath: 'VerificationToken·expires',
							isIdField: false,
							inherited: false,
						},
					],
					name: 'VerificationToken',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Thing: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'Thing' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							path: 'stuff',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE', 'DELETE'],
							cardinality: 'ONE',
							dbPath: 'Thing·stuff',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'things',
							cardinality: 'MANY',
							relation: 'ThingRelation',
							plays: 'things',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'things', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'root',
							cardinality: 'ONE',
							relation: 'ThingRelation',
							plays: 'root',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'root', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'extra',
							cardinality: 'ONE',
							relation: 'ThingRelation',
							plays: 'extra',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'extra', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					name: 'Thing',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
					subTypes: ['SubthingOne', 'SubthingTwo'],
				},
				SubthingOne: {
					extends: 'Thing',
					defaultDBConnector: { id: 'default', as: 'Thing', path: 'SubthingOne' },
					name: 'SubthingOne',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					hooks: {},
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
						{
							path: 'stuff',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE', 'DELETE'],
							cardinality: 'ONE',
							dbPath: 'Thing·stuff',
							isIdField: false,
							inherited: true,
						},
					],
					linkFields: [
						{
							path: 'things',
							cardinality: 'MANY',
							relation: 'ThingRelation',
							plays: 'things',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'things', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
						{
							path: 'root',
							cardinality: 'ONE',
							relation: 'ThingRelation',
							plays: 'root',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'root', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
						{
							path: 'extra',
							cardinality: 'ONE',
							relation: 'ThingRelation',
							plays: 'extra',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'extra', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
					],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['Thing'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				SubthingTwo: {
					extends: 'Thing',
					defaultDBConnector: { id: 'default', as: 'Thing', path: 'SubthingTwo' },
					name: 'SubthingTwo',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					hooks: {},
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
						{
							path: 'stuff',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE', 'DELETE'],
							cardinality: 'ONE',
							dbPath: 'Thing·stuff',
							isIdField: false,
							inherited: true,
						},
					],
					linkFields: [
						{
							path: 'things',
							cardinality: 'MANY',
							relation: 'ThingRelation',
							plays: 'things',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'things', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
						{
							path: 'root',
							cardinality: 'ONE',
							relation: 'ThingRelation',
							plays: 'root',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'root', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
						{
							path: 'extra',
							cardinality: 'ONE',
							relation: 'ThingRelation',
							plays: 'extra',
							target: 'relation',
							$things: ['ThingRelation'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'extra', thing: 'ThingRelation', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: true,
						},
					],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['Thing'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				CascadeThing: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'CascadeThing' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'cascadeRelations',
							cardinality: 'MANY',
							relation: 'CascadeRelation',
							plays: 'things',
							target: 'relation',
							$things: ['CascadeRelation'],
							oppositeLinkFieldsPlayedBy: [
								{ plays: 'cascadeRelations', thing: 'CascadeRelation', thingType: 'relation' },
							],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					name: 'CascadeThing',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Color: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							path: 'isBlue',
							contentType: 'BOOLEAN',
							isVirtual: true,
							default: { type: 'fn' },
							cardinality: 'ONE',
							dbPath: 'Color·isBlue',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'freeForAll',
							cardinality: 'ONE',
							contentType: 'FLEX',
							dbPath: 'Color·freeForAll',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'totalUserTags',
							contentType: 'NUMBER',
							isVirtual: true,
							default: { type: 'fn' },
							cardinality: 'ONE',
							dbPath: 'Color·totalUserTags',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'value',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'Color·value',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'user-tags',
							cardinality: 'MANY',
							relation: 'UserTagGroup',
							plays: 'color',
							target: 'role',
							fieldType: 'linkField',
							pathToRelation: 'group',
							inherited: false,
							$things: ['UserTag'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'color',
									target: 'role',
									cardinality: 'ONE',
									plays: 'tags',
									relation: 'UserTagGroup',
									thing: 'UserTag',
									thingType: 'relation',
									pathToRelation: 'usertaggroup',
								},
							],
						},
						{
							path: 'group',
							target: 'relation',
							cardinality: 'ONE',
							plays: 'color',
							relation: 'UserTagGroup',
							$things: ['UserTagGroup'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'group', thing: 'UserTagGroup', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					name: 'Color',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: ['isBlue', 'totalUserTags'],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Power: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							shared: true,
							path: 'description',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'description',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'space-user',
							cardinality: 'ONE',
							relation: 'Space-User',
							plays: 'power',
							target: 'relation',
							$things: ['Space-User'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'space-user', thing: 'Space-User', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					name: 'Power',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				FlexRef: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default' },
					refFields: {
						reference: {
							cardinality: 'ONE',
							contentType: 'REF',
							path: 'reference',
							dbPath: 'reference',
							inherited: false,
						},
						references: {
							cardinality: 'MANY',
							contentType: 'REF',
							path: 'references',
							dbPath: 'references',
							inherited: false,
						},
						flexReference: {
							cardinality: 'ONE',
							contentType: 'FLEX',
							path: 'flexReference',
							dbPath: 'flexReference',
							inherited: false,
						},
						flexReferences: {
							cardinality: 'MANY',
							contentType: 'FLEX',
							path: 'flexReferences',
							dbPath: 'flexReferences',
							inherited: false,
						},
					},
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					name: 'FlexRef',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Hook: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'Hook' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'requiredOption',
							validations: { required: true, enum: ['a', 'b', 'c'] },
							cardinality: 'ONE',
							dbPath: 'Hook·requiredOption',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'manyOptions',
							cardinality: 'MANY',
							contentType: 'TEXT',
							validations: { enum: ['a', 'b', 'c'] },
							dbPath: 'Hook·manyOptions',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'fnValidatedField',
							contentType: 'TEXT',
							validations: {},
							cardinality: 'ONE',
							dbPath: 'Hook·fnValidatedField',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'DATE',
							path: 'timestamp',
							default: { type: 'fn' },
							cardinality: 'ONE',
							dbPath: 'Hook·timestamp',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'hookParent',
							cardinality: 'ONE',
							relation: 'HookParent',
							plays: 'hooks',
							target: 'relation',
							$things: ['HookParent'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'hookParent', thing: 'HookParent', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'asMainHookOf',
							cardinality: 'ONE',
							relation: 'HookParent',
							plays: 'mainHook',
							target: 'relation',
							$things: ['HookParent'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'asMainHookOf', thing: 'HookParent', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'otherTags',
							cardinality: 'MANY',
							relation: 'HookATag',
							plays: 'hookTypeA',
							target: 'role',
							isVirtual: true,
							dbValue: {
								surrealDB:
									'<future> {RETURN IF (requiredOption = "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption != "a")) ELSE RETURN [] END;}',
							},
							fieldType: 'linkField',
							pathToRelation: 'hookatag',
							inherited: false,
							$things: ['Hook'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'tagA',
									cardinality: 'MANY',
									relation: 'HookATag',
									plays: 'otherHooks',
									target: 'role',
									isVirtual: true,
									dbValue: {
										surrealDB:
											'<future> {RETURN IF (requiredOption != "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption = "a")) ELSE RETURN [] END;}',
									},
									thing: 'Hook',
									thingType: 'entity',
									pathToRelation: 'hookatag',
								},
							],
						},
						{
							path: 'tagA',
							cardinality: 'MANY',
							relation: 'HookATag',
							plays: 'otherHooks',
							target: 'role',
							isVirtual: true,
							dbValue: {
								surrealDB:
									'<future> {RETURN IF (requiredOption != "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption = "a")) ELSE RETURN [] END;}',
							},
							fieldType: 'linkField',
							pathToRelation: 'hookatag',
							inherited: false,
							$things: ['Hook'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'otherTags',
									cardinality: 'MANY',
									relation: 'HookATag',
									plays: 'hookTypeA',
									target: 'role',
									isVirtual: true,
									dbValue: {
										surrealDB:
											'<future> {RETURN IF (requiredOption = "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption != "a")) ELSE RETURN [] END;}',
									},
									thing: 'Hook',
									thingType: 'entity',
									pathToRelation: 'hookatag',
								},
							],
						},
					],
					hooks: {
						pre: [{ triggers: {}, actions: [{ type: 'validate', severity: 'error', message: 'Default message' }] }],
					},
					name: 'Hook',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					refFields: {},
					enumFields: ['requiredOption', 'manyOptions'],
					fnValidatedFields: ['fnValidatedField'],
					virtualFields: [],
					computedFields: ['id', 'timestamp'],
					requiredFields: ['id', 'requiredOption'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
				Company: {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'Company' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							path: 'name',
							contentType: 'TEXT',
							validations: { required: true },
							cardinality: 'ONE',
							dbPath: 'Company·name',
							isIdField: false,
							inherited: false,
						},
						{
							path: 'industry',
							contentType: 'TEXT',
							validations: { enum: ['Tech', 'Finance', 'Healthcare', 'Retail', 'Manufacturing'] },
							cardinality: 'ONE',
							dbPath: 'Company·industry',
							isIdField: false,
							inherited: false,
						},
					],
					linkFields: [
						{
							path: 'employees',
							plays: 'company',
							cardinality: 'MANY',
							relation: 'Employee',
							target: 'relation',
							$things: ['Employee'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'employees', thing: 'Employee', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					name: 'Company',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					refFields: {},
					enumFields: ['industry'],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id', 'name'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'entity',
				},
			},
			relations: {
				'User-Accounts': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'User-Accounts' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						accounts: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Accounts',
									plays: 'accounts',
									target: 'role',
									thing: 'Account',
									thingType: 'entity',
									pathToRelation: 'user-accounts',
								},
							],
							impactedLinkFields: [],
							path: 'accounts',
							$things: ['Account'],
						},
						user: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'accounts',
									relation: 'User-Accounts',
									cardinality: 'MANY',
									plays: 'user',
									target: 'role',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'user-accounts',
								},
							],
							impactedLinkFields: [],
							path: 'user',
							$things: ['User', 'SuperUser', 'God'],
						},
					},
					name: 'User-Accounts',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'User-Sessions': {
					defaultDBConnector: { id: 'default', path: 'User-Sessions' },
					idFields: ['id'],
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						sessions: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'user',
									cardinality: 'ONE',
									relation: 'User-Sessions',
									plays: 'sessions',
									target: 'role',
									thing: 'Session',
									thingType: 'entity',
									pathToRelation: 'user-sessions',
								},
							],
							impactedLinkFields: [],
							path: 'sessions',
							$things: ['Session'],
						},
						user: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'sessions',
									relation: 'User-Sessions',
									cardinality: 'MANY',
									plays: 'user',
									target: 'role',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'user-sessions',
								},
							],
							impactedLinkFields: [],
							path: 'user',
							$things: ['User', 'SuperUser', 'God'],
						},
					},
					name: 'User-Sessions',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'Space-User': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'Space-User' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						spaces: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'users',
									cardinality: 'MANY',
									relation: 'Space-User',
									plays: 'spaces',
									target: 'role',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
							impactedLinkFields: [],
							path: 'spaces',
							$things: ['Space'],
						},
						users: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'spaces',
									relation: 'Space-User',
									cardinality: 'MANY',
									plays: 'users',
									target: 'role',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
							impactedLinkFields: [],
							path: 'users',
							$things: ['User', 'SuperUser', 'God'],
						},
						power: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'space-user',
									cardinality: 'ONE',
									relation: 'Space-User',
									plays: 'power',
									target: 'relation',
									thing: 'Power',
									thingType: 'entity',
									pathToRelation: 'space-user',
								},
							],
							impactedLinkFields: [],
							path: 'power',
							$things: ['Power'],
						},
					},
					name: 'Space-User',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'UserTag': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'UserTag' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							shared: true,
							path: 'name',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'name',
							isIdField: false,
							inherited: false,
						},
					],
					roles: {
						users: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'user-tags',
									relation: 'UserTag',
									cardinality: 'MANY',
									plays: 'users',
									target: 'relation',
									thing: 'User',
									thingType: 'entity',
									pathToRelation: 'user-tags',
								},
							],
							impactedLinkFields: [],
							path: 'users',
							$things: ['User', 'SuperUser', 'God'],
						},
					},
					linkFields: [
						{
							path: 'color',
							target: 'role',
							cardinality: 'ONE',
							plays: 'tags',
							relation: 'UserTagGroup',
							fieldType: 'linkField',
							pathToRelation: 'group',
							inherited: false,
							$things: ['Color'],
							oppositeLinkFieldsPlayedBy: [
								{
									path: 'user-tags',
									cardinality: 'MANY',
									relation: 'UserTagGroup',
									plays: 'color',
									target: 'role',
									thing: 'Color',
									thingType: 'entity',
									pathToRelation: 'usertaggroup',
								},
							],
						},
						{
							path: 'group',
							target: 'relation',
							cardinality: 'ONE',
							plays: 'tags',
							relation: 'UserTagGroup',
							$things: ['UserTagGroup'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'group', thing: 'UserTagGroup', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					name: 'UserTag',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'UserTagGroup': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'UserTagGroup' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						tags: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'color',
									target: 'role',
									cardinality: 'ONE',
									plays: 'tags',
									relation: 'UserTagGroup',
									thing: 'UserTag',
									thingType: 'relation',
									pathToRelation: 'usertaggroup',
								},
								{
									path: 'group',
									target: 'relation',
									cardinality: 'ONE',
									plays: 'tags',
									relation: 'UserTagGroup',
									thing: 'UserTag',
									thingType: 'relation',
									pathToRelation: 'group',
								},
							],
							impactedLinkFields: [],
							path: 'tags',
							$things: ['UserTag'],
						},
						color: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'user-tags',
									cardinality: 'MANY',
									relation: 'UserTagGroup',
									plays: 'color',
									target: 'role',
									thing: 'Color',
									thingType: 'entity',
									pathToRelation: 'usertaggroup',
								},
								{
									path: 'group',
									target: 'relation',
									cardinality: 'ONE',
									plays: 'color',
									relation: 'UserTagGroup',
									thing: 'Color',
									thingType: 'entity',
									pathToRelation: 'group',
								},
							],
							impactedLinkFields: [],
							path: 'color',
							$things: ['Color'],
						},
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'userTagGroups',
									cardinality: 'MANY',
									relation: 'UserTagGroup',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'userTagGroups',
								},
							],
							impactedLinkFields: [],
							path: 'space',
							$things: ['Space'],
						},
					},
					name: 'UserTagGroup',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'SpaceObj': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'SpaceObj' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'objects',
									cardinality: 'MANY',
									relation: 'SpaceObj',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'objects',
								},
							],
							impactedLinkFields: [],
							path: 'space',
							$things: ['Space'],
						},
					},
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					name: 'SpaceObj',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
					subTypes: ['SpaceDef', 'Kind', 'Field', 'DataField', 'Self'],
				},
				'SpaceDef': {
					extends: 'SpaceObj',
					defaultDBConnector: { id: 'default', as: 'SpaceObj', path: 'SpaceDef' },
					dataFields: [
						{
							shared: true,
							path: 'description',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'description',
							isIdField: false,
							inherited: false,
						},
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
					],
					name: 'SpaceDef',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['SpaceObj'],
					dbProviderConfig: { linkMode: 'refs' },
					roles: {
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: true,
							playedBy: [
								{
									path: 'definitions',
									cardinality: 'MANY',
									relation: 'SpaceDef',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'definitions',
								},
							],
							impactedLinkFields: [
								{
									path: 'objects',
									cardinality: 'MANY',
									relation: 'SpaceObj',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'objects',
								},
							],
							path: 'space',
							$things: ['Space'],
						},
					},
					thingType: 'relation',
					subTypes: ['Kind', 'Field', 'DataField'],
				},
				'Kind': {
					extends: 'SpaceDef',
					dataFields: [
						{
							contentType: 'TEXT',
							path: 'name',
							rights: ['CREATE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'Kind·name',
							isIdField: false,
							inherited: false,
						},
						{
							shared: true,
							path: 'description',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'description',
							isIdField: false,
							inherited: true,
						},
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
					],
					linkFields: [
						{
							path: 'fields',
							relation: 'Field',
							cardinality: 'MANY',
							plays: 'kinds',
							target: 'relation',
							$things: ['Field', 'DataField'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'fields', thing: 'Field', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'dataFields',
							relation: 'DataField',
							cardinality: 'MANY',
							plays: 'kinds',
							target: 'relation',
							$things: ['DataField'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'dataFields', thing: 'DataField', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					defaultDBConnector: { id: 'default', as: 'SpaceDef', path: 'Kind' },
					hooks: {
						pre: [
							{ actions: [{ type: 'transform' }] },
							{
								triggers: {},
								actions: [
									{
										type: 'validate',
										severity: 'error',
										message: 'Name must not exist, or be less than 15 characters',
									},
									{
										type: 'validate',
										severity: 'error',
										message: 'Name must not exist, or be less than 15 characters',
									},
									{ type: 'transform' },
								],
							},
						],
					},
					name: 'Kind',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['SpaceDef', 'SpaceObj'],
					dbProviderConfig: { linkMode: 'refs' },
					roles: {
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: true,
							playedBy: [
								{
									path: 'kinds',
									cardinality: 'MANY',
									relation: 'Kind',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'kinds',
								},
							],
							impactedLinkFields: [
								{
									path: 'objects',
									cardinality: 'MANY',
									relation: 'SpaceObj',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'objects',
								},
								{
									path: 'definitions',
									cardinality: 'MANY',
									relation: 'SpaceDef',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'definitions',
								},
							],
							path: 'space',
							$things: ['Space'],
						},
					},
					thingType: 'relation',
				},
				'Field': {
					extends: 'SpaceDef',
					dataFields: [
						{
							contentType: 'TEXT',
							path: 'name',
							cardinality: 'ONE',
							dbPath: 'Field·name',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'cardinality',
							cardinality: 'ONE',
							dbPath: 'Field·cardinality',
							isIdField: false,
							inherited: false,
						},
						{
							shared: true,
							path: 'description',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'description',
							isIdField: false,
							inherited: true,
						},
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
					],
					roles: {
						kinds: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'fields',
									relation: 'Field',
									cardinality: 'MANY',
									plays: 'kinds',
									target: 'relation',
									thing: 'Kind',
									thingType: 'relation',
									pathToRelation: 'fields',
								},
							],
							impactedLinkFields: [],
							path: 'kinds',
							$things: ['Kind'],
						},
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: true,
							playedBy: [
								{
									path: 'fields',
									cardinality: 'MANY',
									relation: 'Field',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'fields',
								},
							],
							impactedLinkFields: [
								{
									path: 'objects',
									cardinality: 'MANY',
									relation: 'SpaceObj',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'objects',
								},
								{
									path: 'definitions',
									cardinality: 'MANY',
									relation: 'SpaceDef',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'definitions',
								},
							],
							path: 'space',
							$things: ['Space'],
						},
					},
					defaultDBConnector: { id: 'default', as: 'SpaceDef', path: 'Field' },
					name: 'Field',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['SpaceDef', 'SpaceObj'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
					subTypes: ['DataField'],
				},
				'DataField': {
					extends: 'Field',
					dataFields: [
						{
							contentType: 'TEXT',
							path: 'type',
							cardinality: 'ONE',
							dbPath: 'DataField·type',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'computeType',
							cardinality: 'ONE',
							dbPath: 'DataField·computeType',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'name',
							cardinality: 'ONE',
							dbPath: 'Field·name',
							isIdField: false,
							inherited: true,
						},
						{
							contentType: 'TEXT',
							path: 'cardinality',
							cardinality: 'ONE',
							dbPath: 'Field·cardinality',
							isIdField: false,
							inherited: true,
						},
						{
							shared: true,
							path: 'description',
							contentType: 'TEXT',
							cardinality: 'ONE',
							dbPath: 'description',
							isIdField: false,
							inherited: true,
						},
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
					],
					hooks: {
						pre: [
							{ actions: [{ type: 'transform' }] },
							{
								actions: [
									{
										name: 'Validate tf2 test in datafield',
										type: 'validate',
										message: 'Failed test tf2 in datafield',
										severity: 'error',
									},
								],
							},
						],
					},
					linkFields: [
						{
							path: 'values',
							relation: 'DataValue',
							cardinality: 'MANY',
							plays: 'dataField',
							target: 'relation',
							$things: ['DataValue'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'values', thing: 'DataValue', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
						{
							path: 'expression',
							relation: 'Expression',
							cardinality: 'ONE',
							plays: 'dataField',
							target: 'relation',
							$things: ['Expression'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'expression', thing: 'Expression', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					defaultDBConnector: { id: 'default', as: 'Field', path: 'DataField' },
					name: 'DataField',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					idFields: ['id'],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['Field', 'SpaceDef', 'SpaceObj'],
					dbProviderConfig: { linkMode: 'refs' },
					roles: {
						kinds: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: true,
							playedBy: [
								{
									path: 'dataFields',
									relation: 'DataField',
									cardinality: 'MANY',
									plays: 'kinds',
									target: 'relation',
									thing: 'Kind',
									thingType: 'relation',
									pathToRelation: 'dataFields',
								},
							],
							impactedLinkFields: [
								{
									path: 'fields',
									relation: 'Field',
									cardinality: 'MANY',
									plays: 'kinds',
									target: 'relation',
									thing: 'Kind',
									thingType: 'relation',
									pathToRelation: 'fields',
								},
							],
							path: 'kinds',
							$things: ['Kind'],
						},
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: true,
							playedBy: [
								{
									path: 'dataFields',
									cardinality: 'MANY',
									relation: 'DataField',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'dataFields',
								},
							],
							impactedLinkFields: [
								{
									path: 'objects',
									cardinality: 'MANY',
									relation: 'SpaceObj',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'objects',
								},
								{
									path: 'definitions',
									cardinality: 'MANY',
									relation: 'SpaceDef',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'definitions',
								},
								{
									path: 'fields',
									cardinality: 'MANY',
									relation: 'Field',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'fields',
								},
							],
							path: 'space',
							$things: ['Space'],
						},
					},
					thingType: 'relation',
				},
				'DataValue': {
					idFields: ['id'],
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'type',
							cardinality: 'ONE',
							dbPath: 'DataValue·type',
							isIdField: false,
							inherited: false,
						},
					],
					hooks: {
						pre: [
							{
								actions: [
									{
										name: 'Validate tf2 test in expression',
										type: 'validate',
										message: 'Failed test tf2 in expression',
										severity: 'error',
									},
								],
							},
						],
					},
					roles: {
						dataField: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'values',
									relation: 'DataValue',
									cardinality: 'MANY',
									plays: 'dataField',
									target: 'relation',
									thing: 'DataField',
									thingType: 'relation',
									pathToRelation: 'values',
								},
							],
							impactedLinkFields: [],
							path: 'dataField',
							$things: ['DataField'],
						},
					},
					defaultDBConnector: { id: 'default', path: 'DataValue' },
					name: 'DataValue',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'Expression': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', as: 'Expression', path: 'Expression' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'value',
							rights: ['CREATE', 'UPDATE'],
							cardinality: 'ONE',
							dbPath: 'Expression·value',
							isIdField: false,
							inherited: false,
						},
						{
							contentType: 'TEXT',
							path: 'type',
							cardinality: 'ONE',
							dbPath: 'Expression·type',
							isIdField: false,
							inherited: false,
						},
					],
					hooks: {
						pre: [
							{
								actions: [
									{
										name: 'Validate tf2 test in expression',
										type: 'validate',
										message: 'Failed test tf2 in expression',
										severity: 'error',
									},
								],
							},
						],
					},
					roles: {
						dataField: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'expression',
									relation: 'Expression',
									cardinality: 'ONE',
									plays: 'dataField',
									target: 'relation',
									thing: 'DataField',
									thingType: 'relation',
									pathToRelation: 'expression',
								},
							],
							impactedLinkFields: [],
							path: 'dataField',
							$things: ['DataField'],
						},
					},
					name: 'Expression',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'Self': {
					idFields: ['id'],
					extends: 'SpaceObj',
					defaultDBConnector: { id: 'default', as: 'SpaceObj', path: 'Self' },
					roles: {
						owner: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'owned',
									cardinality: 'MANY',
									relation: 'Self',
									plays: 'owner',
									target: 'relation',
									thing: 'Self',
									thingType: 'relation',
									pathToRelation: 'owned',
								},
							],
							impactedLinkFields: [],
							path: 'owner',
							$things: ['Self'],
						},
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: true,
							playedBy: [
								{
									path: 'selfs',
									cardinality: 'MANY',
									relation: 'Self',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'selfs',
								},
							],
							impactedLinkFields: [
								{
									path: 'objects',
									cardinality: 'MANY',
									relation: 'SpaceObj',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'objects',
								},
							],
							path: 'space',
							$things: ['Space'],
						},
					},
					linkFields: [
						{
							path: 'owned',
							cardinality: 'MANY',
							relation: 'Self',
							plays: 'owner',
							target: 'relation',
							$things: ['Self'],
							oppositeLinkFieldsPlayedBy: [{ plays: 'owned', thing: 'Self', thingType: 'relation' }],
							fieldType: 'linkField',
							inherited: false,
						},
					],
					name: 'Self',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: true,
						},
					],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					allExtends: ['SpaceObj'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'ThingRelation': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'ThingRelation' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							path: 'moreStuff',
							contentType: 'TEXT',
							rights: ['CREATE', 'UPDATE', 'DELETE'],
							cardinality: 'ONE',
							dbPath: 'ThingRelation·moreStuff',
							isIdField: false,
							inherited: false,
						},
					],
					roles: {
						things: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'things',
									cardinality: 'MANY',
									relation: 'ThingRelation',
									plays: 'things',
									target: 'relation',
									thing: 'Thing',
									thingType: 'entity',
									pathToRelation: 'things',
								},
							],
							impactedLinkFields: [],
							path: 'things',
							$things: ['Thing', 'SubthingOne', 'SubthingTwo'],
						},
						root: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'root',
									cardinality: 'ONE',
									relation: 'ThingRelation',
									plays: 'root',
									target: 'relation',
									thing: 'Thing',
									thingType: 'entity',
									pathToRelation: 'root',
								},
							],
							impactedLinkFields: [],
							path: 'root',
							$things: ['Thing', 'SubthingOne', 'SubthingTwo'],
						},
						extra: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'extra',
									cardinality: 'ONE',
									relation: 'ThingRelation',
									plays: 'extra',
									target: 'relation',
									thing: 'Thing',
									thingType: 'entity',
									pathToRelation: 'extra',
								},
							],
							impactedLinkFields: [],
							path: 'extra',
							$things: ['Thing', 'SubthingOne', 'SubthingTwo'],
						},
					},
					name: 'ThingRelation',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'CascadeRelation': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'CascadeRelation' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						things: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'cascadeRelations',
									cardinality: 'MANY',
									relation: 'CascadeRelation',
									plays: 'things',
									target: 'relation',
									thing: 'CascadeThing',
									thingType: 'entity',
									pathToRelation: 'cascadeRelations',
								},
							],
							impactedLinkFields: [],
							path: 'things',
							$things: ['CascadeThing'],
						},
					},
					hooks: { pre: [{ actions: [{ type: 'transform' }] }] },
					name: 'CascadeRelation',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'HookParent': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'HookParent' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						hooks: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'hookParent',
									cardinality: 'ONE',
									relation: 'HookParent',
									plays: 'hooks',
									target: 'relation',
									thing: 'Hook',
									thingType: 'entity',
									pathToRelation: 'hookParent',
								},
							],
							impactedLinkFields: [],
							path: 'hooks',
							$things: ['Hook'],
						},
						mainHook: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'asMainHookOf',
									cardinality: 'ONE',
									relation: 'HookParent',
									plays: 'mainHook',
									target: 'relation',
									thing: 'Hook',
									thingType: 'entity',
									pathToRelation: 'asMainHookOf',
								},
							],
							impactedLinkFields: [],
							path: 'mainHook',
							$things: ['Hook'],
						},
					},
					name: 'HookParent',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'HookATag': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'HookATag' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					roles: {
						hookTypeA: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'otherTags',
									cardinality: 'MANY',
									relation: 'HookATag',
									plays: 'hookTypeA',
									target: 'role',
									isVirtual: true,
									dbValue: {
										surrealDB:
											'<future> {RETURN IF (requiredOption = "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption != "a")) ELSE RETURN [] END;}',
									},
									thing: 'Hook',
									thingType: 'entity',
									pathToRelation: 'hookatag',
								},
							],
							impactedLinkFields: [],
							path: 'hookTypeA',
							$things: ['Hook'],
						},
						otherHooks: {
							cardinality: 'MANY',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'tagA',
									cardinality: 'MANY',
									relation: 'HookATag',
									plays: 'otherHooks',
									target: 'role',
									isVirtual: true,
									dbValue: {
										surrealDB:
											'<future> {RETURN IF (requiredOption != "a") THEN ( RETURN SELECT VALUE id FROM Hook WHERE (requiredOption = "a")) ELSE RETURN [] END;}',
									},
									thing: 'Hook',
									thingType: 'entity',
									pathToRelation: 'hookatag',
								},
							],
							impactedLinkFields: [],
							path: 'otherHooks',
							$things: ['Hook'],
						},
					},
					hooks: {
						pre: [{ triggers: {}, actions: [{ type: 'validate', severity: 'error', message: "Can't be an array" }] }],
					},
					name: 'HookATag',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'FlexRefRel': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'FlexRefRel' },
					roles: {
						space: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'flexRefRels',
									cardinality: 'MANY',
									relation: 'FlexRefRel',
									plays: 'space',
									target: 'relation',
									thing: 'Space',
									thingType: 'entity',
									pathToRelation: 'flexRefRels',
								},
							],
							impactedLinkFields: [],
							path: 'space',
							$things: ['Space'],
						},
					},
					refFields: {
						reference: {
							cardinality: 'ONE',
							contentType: 'REF',
							path: 'reference',
							dbPath: 'reference',
							inherited: false,
						},
						references: {
							cardinality: 'MANY',
							contentType: 'REF',
							path: 'references',
							dbPath: 'references',
							inherited: false,
						},
						flexReference: {
							cardinality: 'ONE',
							contentType: 'FLEX',
							path: 'flexReference',
							dbPath: 'flexReference',
							inherited: false,
						},
						flexReferences: {
							cardinality: 'MANY',
							contentType: 'FLEX',
							path: 'flexReferences',
							dbPath: 'flexReferences',
							inherited: false,
						},
					},
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
					],
					name: 'FlexRefRel',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
				'Employee': {
					idFields: ['id'],
					defaultDBConnector: { id: 'default', path: 'Employee' },
					dataFields: [
						{
							shared: true,
							path: 'id',
							default: { type: 'fn' },
							validations: { required: true, unique: true },
							contentType: 'ID',
							rights: ['CREATE'],
							cardinality: 'ONE',
							dbPath: 'id',
							isIdField: true,
							inherited: false,
						},
						{
							shared: true,
							path: 'name',
							contentType: 'TEXT',
							validations: { required: true },
							cardinality: 'ONE',
							dbPath: 'name',
							isIdField: false,
							inherited: false,
						},
					],
					roles: {
						company: {
							cardinality: 'ONE',
							fieldType: 'roleField',
							inherited: false,
							playedBy: [
								{
									path: 'employees',
									plays: 'company',
									cardinality: 'MANY',
									relation: 'Employee',
									target: 'relation',
									thing: 'Company',
									thingType: 'entity',
									pathToRelation: 'employees',
								},
							],
							impactedLinkFields: [],
							path: 'company',
							$things: ['Company'],
						},
					},
					name: 'Employee',
					db: 'surrealDB',
					dbContext: { mutation: { splitArray$Ids: false, requiresParseBQL: false } },
					hooks: {},
					linkFields: [],
					refFields: {},
					enumFields: [],
					fnValidatedFields: [],
					virtualFields: [],
					computedFields: ['id'],
					requiredFields: ['id', 'name'],
					dbProviderConfig: { linkMode: 'refs' },
					thingType: 'relation',
				},
			},
		};
		expect(enrichedSchema).toMatchObject(expected);
		expect(input).toMatchObject(schema);
	});
});

const deepClone = <T>(obj: T): T => {
	if (typeof obj !== 'object') {
		return obj;
	}
	if (obj === null) {
		return obj;
	}
	if (Array.isArray(obj)) {
		return obj.map((i) => deepClone(i)) as T;
	}
	return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, deepClone(v)])) as T;
};
